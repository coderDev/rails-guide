
http://guides.rubyonrails.org/getting_started.html#creating-a-new-rails-project

Creating  application:
  Step 1:
    # rails new application_name
    $ rails new blog
  Step 2:
    # go into application folder root
    $ cd blog
  Step 3:
    # creating frontpage
    # rails generate controller (controller_name) (action_name|view_name)
    $ rails generate controller welcome index
  Step 4:
    # setting root route
    # open config/routes.rb and modify (remove # in front of root)
    # root 'welcome#index' to root 'welcome#index'

Basic CRUD operations with Resources

  NOTE: A resource is the term used for a collection of similar objects, such as articles, people or animals. You can create, read, update and destroy items for a resource.

  Step 1:
    # Define a Resource in routes.rb
    # resources :resources_name
    # resources :articles
  Step 2:
    # Run rake routes, to see routes for all the standard RESTful actions.
    $ rake routes
  Step 3:
    # Create new articles in application and view them, "C" and the "R" from CRUD.
    # open http://localhost:3000/articles/new
    # generate articles controller
    $ bin/rails g controller articles
    # define a 'new' method inside the controller
      def new
      end
    # create template in articles view (app/views/articles/new.html.erb)
    # <h1>New Article</h1>
  Step 4:
    # Create basic form
    NOTE: To create a form within this template, you will use a form builder. The primary form builder for Rails is provided by a helper method called 'form_for'.
    # open app/views/articles/new.html.erb
    # add this code to generate form
      <%= form_for :article do |f| %>
        <p>
          <%= f.label :title %><br>
          <%= f.text_field :title %>
        </p>

        <p>
          <%= f.label :text %><br>
          <%= f.text_area :text %>
        </p>

        <p>
          <%= f.submit %>
        </p>
      <% end %>
      Note:
          In 'form_for', we pass an identifying object for form. In this case, it's the symbol :article. This tells the form_for helper what this form is for.

          FormBuilder object - represented by f - is used to build two labels and two text fields, one each for the title and text of an article.

          Add action attribute for the form using :url option of form_for. (Typically in Rails, the action that is used for new form submissions like this is called "create", and so the form should be pointed to that action.)

          <%= form_for :article, url: articles_path do |f| %>

          Finally, a call to submit on the f object will create a submit button for the form.
Step 5:
    # Run rake routes
    $ rake routes
    # define create action in articles controller
      def create
      end
    # When a form is submitted, the fields of the form are sent to Rails as parameters. These parameters can then be referenced inside the controller actions. change the create action to this:
      def create
        render plain: params[:article].inspect
      end
Step 6:
    # Creating the Article model
    # Models in Rails use a singular name, and their corresponding database tables use a plural name.
    $ bin/rails generate model Article title:string text:text
    NOTE:
        With that command we told Rails that we want a Article model, together with a title attribute of type string, and a text attribute of type text. Those attributes are automatically added to the articles table in the database and mapped to the Article model.
Step 7:
    # Running a Migration
    # Migrations are Ruby classes that are designed to make it simple to create and modify database tables.
    # rails generate model created a database migration file inside the db/migrate directory.
    # use rake command to run db migration
    $ bin/rake db:migrate

    NOTE:
      By default, this command will apply to the database defined in the development section of your config/database.yml file. If you would like to execute migrations in another environment, for instance in production, you must explicitly pass it when invoking the command: rake db:migrate RAILS_ENV=production.
Step 8:
    # Saving data in the controller
    # change the create action to use the new Article model to save the data in the database.

      def create
        @article = Article.new(params[:article])

        @article.save
        redirect_to @article
      end
    NOTE:
      Rails model can be initialized with its respective attributes, which are automatically mapped to the respective database columns. In the first line we do just that (remember that params[:article] contains the attributes we're interested in). Then, @article.save is responsible for saving the model in the database. Finally, we redirect the user to the show action, which we'll define later.
Step 9:
    # Showing Articles
    # Check path by rake routes output i.e. article GET    /articles/:id(.:format)      articles#show
    # add 'show' action in articles controller

      def show
        @article = Article.find(params[:id])
      end
    # Create a new temmplate in app/views/articles/show.html.erb and add below code
      <p>
        <strong>Title:</strong>
        <%= @article.title %>
      </p>

      <p>
        <strong>Text:</strong>
        <%= @article.text %>
      </p>
Step 10:
    # Listing all articles
    # Check path by rake routes output i.e. articles GET    /articles(.:format)          articles#index
    # add index action to app/controllers/articles_controller.rb
      def index
        @articles = Article.all
      end
    # create a template file for index action at (app/views/articles/index.html.erb)
    # add below code to list all articles
      <h1>Listing articles</h1>

      <table>
        <tr>
          <th>Title</th>
          <th>Text</th>
        </tr>

        <% @articles.each do |article| %>
          <tr>
            <td><%= article.title %></td>
            <td><%= article.text %></td>
          </tr>
        <% end %>
      </table>
Step 11:
    # Adding links
    # The link_to method is one of Rails' built-in view helpers. It creates a hyperlink based on text to display and where to go - in this case, to the path for articles.
    <%= link_to 'My Blog', controller: 'articles' %>
    <%= link_to 'New article', new_article_path %>
    <%= link_to 'Back', articles_path %>
Step 12:
    # Adding Some Validation
    # Article class inherits from ActiveRecord::Base
    # Active Record supplies a great deal of functionality to your Rails models for free, including basic
    # database CRUD (Create, Read, Update, Destroy) operations, data validation, as well as sophisticated search
    # support and the ability to relate multiple models to one another.

    # open app/models/article.rb file and add below code in modle
      def new
        @article = Article.new
      end

      def create
        @article = Article.new(article_params)

        if @article.save
          redirect_to @article
        else
          render 'new'
        end
      end

      private
        def article_params
          params.require(:article).permit(:title, :text)
        end
    # modify app/views/articles/new.html.erb to check for error messages
      <%= form_for :article, url: articles_path do |f| %>
        <% if @article.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(@article.errors.count, "error") %> prohibited
            this article from being saved:</h2>
          <ul>
          <% @article.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
          </ul>
        </div>
        <% end %>
        <p>
          <%= f.label :title %><br>
          <%= f.text_field :title %>
        </p>

        <p>
          <%= f.label :text %><br>
          <%= f.text_area :text %>
        </p>

        <p>
          <%= f.submit %>
        </p>
      <% end %>

      <%= link_to 'Back', articles_path %>
Step 13:
    # Updating Articles
    # Adding an edit action to the ArticlesController
      def edit
        @article = Article.find(params[:id])
      end
    # Create a file called app/views/articles/edit.html.erb
      <h1>Editing article</h1>

      <%= form_for :article, url: article_path(@article), method: :patch do |f| %>
        <% if @article.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(@article.errors.count, "error") %> prohibited
            this article from being saved:</h2>
          <ul>
          <% @article.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
          </ul>
        </div>
        <% end %>
        <p>
          <%= f.label :title %><br>
          <%= f.text_field :title %>
        </p>

        <p>
          <%= f.label :text %><br>
          <%= f.text_area :text %>
        </p>

        <p>
          <%= f.submit %>
        </p>
      <% end %>

      <%= link_to 'Back', articles_path %>
Step 14:
  # Using partials to clean up duplication in views
  # Partials files are used to remove duplication of views by using a view partial.
  # By convention, partial files are prefixed by an underscore.
  # Create a view app/views/articles/_form.html.erb
    <%= form_for @article do |f| %>
      <% if @article.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@article.errors.count, "error") %> prohibited
          this article from being saved:</h2>
        <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
      </div>
      <% end %>
      <p>
        <%= f.label :title %><br>
        <%= f.text_field :title %>
      </p>
      <p>
        <%= f.label :text %><br>
        <%= f.text_area :text %>
      </p>
      <p>
        <%= f.submit %>
      </p>
    <% end %>

  # update the app/views/articles/new.html.erb
    <h1>New article</h1>
    <%= render 'form' %>
    <%= link_to 'Back', articles_path %>

  # update app/views/articles/edit.html.erb
    <h1>Edit article</h1>
    <%= render 'form' %>
    <%= link_to 'Back', articles_path %>
Step 15:
  # Deleting Articles
  # delete routing method is used for destroying resources, and this route is mapped to the destroy action
  # DELETE /articles/:id(.:format)      articles#destroy
  # Creating app/controllers/articles_controller.rb
    def destroy
      @article = Article.find(params[:id])
      @article.destroy

      redirect_to articles_path
    end
    # add a 'Destroy' link to your index action template
      <h1>Listing Articles</h1>
      <%= link_to 'New article', new_article_path %>
      <table>
        <tr>
          <th>Title</th>
          <th>Text</th>
          <th colspan="3"></th>
        </tr>
      <% @articles.each do |article| %>
        <tr>
          <td><%= article.title %></td>
          <td><%= article.text %></td>
          <td><%= link_to 'Show', article_path(article) %></td>
          <td><%= link_to 'Edit', edit_article_path(article) %></td>
          <td><%= link_to 'Destroy', article_path(article), method: :delete, data: { confirm: 'Are you sure?' } %>
          </td>
        </tr>
      <% end %>
      </table>
